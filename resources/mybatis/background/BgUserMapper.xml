<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="BgUserMapper">

	<cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>
	
	<sql id="userColumns">
		userId,userName,password,name,permissions,roleId
		,lastLogin,loginIp,status,bz,skin,email,userNumber,phone
	</sql>
	
	<sql id="userRoleColumns">
		u.userId,u.userName,u.password,u.name,u.permissions as userPermissions
		,u.lastLogin,u.loginIp,u.status,u.bz,u.skin,u.email,u.userNumber,u.phone
		,r.roleId,r.roleName,r.permissions as rolePermissions 
		</sql>
	
	<resultMap type="BgUser" id="userResultMap">
		<id column="userId" property="userId"/>
		<result column="userName" property="userName"/>
		<result column="password" property="password"/>
		<result column="name" property="name"/>
		<result column="permissions" property="permissions"/>
		<result column="roleId" property="roleId"/>
		<result column="lastLogin" property="lastLogin"/>
		<result column="loginIp" property="loginIp"/>
		<result column="status" property="status"/>
		<result column="bz" property="bz"/>
		<result column="skin" property="skin"/>
		<result column="email" property="email"/>
		<result column="userNumber" property="userNumber"/>
		<result column="phone" property="phone"/>
	</resultMap>
	
	<resultMap type="BgUser" id="userRoleResultMap">
		<id column="userId" property="userId"/>
		<result column="userName" property="userName"/>
		<result column="password" property="password"/>
		<result column="name" property="name"/>
		<result column="userPermissions" property="permissions"/>
		<result column="roleId" property="roleId"/>
		<result column="lastLogin" property="lastLogin"/>
		<result column="loginIp" property="loginIp"/>
		<result column="status" property="status"/>
		<result column="bz" property="bz"/>
		<result column="skin" property="skin"/>
		<result column="email" property="email"/>
		<result column="userNumber" property="userNumber"/>
		<result column="phone" property="phone"/>
		<association property="bgRole" column="roleId" javaType="BgRole">
			<id column="roleId" property="roleId"/>
			<result column="roleName" property="roleName"/>
			<result column="rolePermissions" property="permissions"/>
		</association>
	</resultMap>
	
	
	
	
		
	<!-- 新增用户 -->
	<insert id="addUser" parameterType="pd" flushCache="false">
		insert into bgUser (
			<include refid="userColumns"/>
		) values (
			#{userId},
			#{userName},
			#{password},
			#{name},
			#{permissions},
			#{roleId},
			#{lastLogin},
			#{loginIp},
			#{status},
			#{bz},
			#{skin},
			#{email},
			#{userNumber},
			#{phone}
		)
	</insert>
	
		<!-- 删除用户 -->
	<delete id="deleteUser" parameterType="pd" flushCache="false">
		delete from bgUser
		where 
			userId = #{userId}
	</delete>
	
	<!-- 批量删除用户 -->
	<delete id="deleteMoreUser" parameterType="String" flushCache="false">
		delete from bgUser
		where 
			userId in
  			 <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
                  #{item}
             </foreach>
	</delete>
	
	<!-- 修改 -->
	<update id="editUser" parameterType="pd" flushCache="false">
		update  bgUser
			set userName				= #{userName},
				name 					= #{name},
				roleId 					= #{roleId},
				bz						= #{bz},
				email					= #{email},
				userNumber				= #{userNumber},
				phone					= #{phone}
			<if test="password != null and password != ''">
				,password				= #{password}
			</if>
			where 
				userId = #{userId}
	</update>
	
	<!-- 换皮肤-->
	<update id="changeSkin" parameterType="pd" flushCache="false">
		update bgUser set 
		skin = #{skin} 
		where userName = #{userName}
	</update>
	
	<!-- 存入IP -->
	<update id="changeLoginIpInfo" parameterType="BgUser" flushCache="false">
		update bgUser 
			set 
				lastLogin = #{lastLogin},
				loginIp = #{loginIp}
			where 
				userName = #{userName}
	</update>
	
	<!-- 存入IP -->
	<update id="changeLoginIp" parameterType="pd" flushCache="false">
		update bgUser 
			set 
				loginIp = #{loginIp}
			where 
				userName = #{userName}
	</update>
	
	<!-- 更新登录时间 -->
	<update id="changeLastLogin" parameterType="pd" flushCache="false">
		update bgUser set 
		lastLogin = #{lastLogin} 
		where userId = #{userName}
	</update>
	
	<!-- 通过userId获取数据 -->
	<select id="findByUserId" parameterType="pd" resultType="BgUser" useCache="false">
		select 
			<include refid="userColumns"/>
		from 
			bgUser
		where 
			userName = #{userName}
	</select>
	
	<!-- 通过userName获取数据 -->
	<select id="findByUserName" parameterType="pd" resultType="BgUser" useCache="false">
		select 
			<include refid="userColumns"/>
		from 
			bgUser
		where 
			userName = #{userName}
	</select>
			
	<!-- 通过email获取数据 -->
	<select id="findByEmail" parameterType="pd" resultType="BgUser" useCache="false">
		select 
			<include refid="userColumns"/>
		from 
			bgUser
		where 
			email = #{email}
		<if test="userName != null and userName != ''">
			and userName != #{userName} 
		</if>
	</select>
	
	<!-- 通过userNumber获取数据 -->
	<select id="findByUserNumber" parameterType="pd" resultType="BgUser" useCache="false">
		select 
			<include refid="userColumns"/>
		from 
			bgUser
		where 
			userNumber = #{userNumber}
		<if test="userName != null and userName != ''">
			and userName != #{userName} 
		</if>
	</select>
	
	<!-- 用户列表(用户组) -->
	<select id="listUser" parameterType="bgPage" resultMap="userRoleResultMap" useCache="false">
		select  
			<include refid="userRoleColumns"/>
		from bgUser u, bgRole r 
		where u.roleId = r.roleId 
		and u.userName != 'admin'
		and (r.roleId != '7' and r.parentId != '7')
		<if test="pd.userName != null and pd.userName != ''"><!-- 关键词检索 -->
			and
				(
					 u.userName LIKE CONCAT(CONCAT('%', #{pd.userName}),'%')
					 or 
					 u.email LIKE CONCAT(CONCAT('%', #{pd.userName}),'%') 
					 or
					 u.userNumber LIKE CONCAT(CONCAT('%', #{pd.userName}),'%')
					 or
					 u.name LIKE CONCAT(CONCAT('%', #{pd.userName}),'%')
					 or
					 u.phone LIKE CONCAT(CONCAT('%', #{pd.userName}),'%')
				)
		</if>
		<if test="pd.roleId != null and pd.roleId != ''"><!-- 角色检索 -->
			and u.roleId=#{pd.roleId} 
		</if>
		<if test="pd.lastLoginStart!=null and pd.lastLoginStart!=''"><!-- 登录时间检索 -->
			and u.lastLogin &gt;= #{pd.lastLoginStart} 
		</if>
		<if test="pd.lastLoginEnd!=null and pd.lastLoginEnd!=''"><!-- 登录时间检索 -->
			and u.lastLogin &lt;= #{pd.lastLoginEnd} 
		</if>
		order by u.lastLogin desc
	</select>
	
	<!-- 用户列表(全部) -->
	<select id="listAllUser" parameterType="pd" resultMap="userRoleResultMap" useCache="false">
		select  
			<include refid="userRoleColumns"/>
		from bgUser u, bgRole r 
		where u.roleId = r.roleId 
		and u.userName != 'admin'
		and (r.roleId != '7' and r.parentId != '7')
		<if test="userName != null and userName != ''"><!-- 关键词检索 -->
			and
				(
					 u.userName LIKE CONCAT(CONCAT('%', #{userName}),'%')
					 or 
					 u.email LIKE CONCAT(CONCAT('%', #{userName}),'%') 
					 or
					 u.userNumber LIKE CONCAT(CONCAT('%', #{userName}),'%')
					 or
					 u.name LIKE CONCAT(CONCAT('%', #{userName}),'%')
					  or
					 u.phone LIKE CONCAT(CONCAT('%', #{userName}),'%')
				)
		</if>
		<if test="roleId != null and roleId != ''"><!-- 角色检索 -->
			and u.roleId=#{roleId} 
		</if>
		<if test="lastLoginStart!=null and lastLoginStart!=''"><!-- 登录时间检索 -->
			and u.lastLogin &gt;= #{lastLoginStart} 
		</if>
		<if test="lastLoginEnd!=null and lastLoginEnd!=''"><!-- 登录时间检索 -->
			and u.lastLogin &lt;= #{lastLoginEnd} 
		</if>
		order by u.lastLogin desc
	</select>
	
	
	<!-- 判断用户名和密码 -->
	<select id="checkUserByNameAndPwd" parameterType="pd" resultType="BgUser" useCache="false">
	<!-- insert update delete (flushCache="true/false") -->
		select * from bgUser 
		where 1=1
		<if test="userName != null and password != null">
	  	and	(
	  		(userName = #{userName} and password = #{password})
	  		or
	  		(email = #{userName} and password = #{password})
	  		or
	  		(userNumber = #{userName} and password = #{password})
	  		)
		</if>
		<if test="userId != null and userId != ''">
		and userId = #{userId}
		</if>
	</select>
	
	<!-- 通过userId获取数据 -->
	<select id="getUserRoleById" parameterType="String" resultMap="userRoleResultMap" useCache="false">
		select  
			<include refid="userRoleColumns"/> 
		from bgUser u 
		left join bgRole r 
		on u.roleId=r.roleId 
		where u.status=0 
		and u.userId=#{userId}
	</select>

</mapper>